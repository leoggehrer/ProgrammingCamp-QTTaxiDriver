//@GeneratedCode
namespace QTTaxiDriver.Logic.Models.App
{
    ///
    /// Generated by the generator
    ///
    public partial class Drive
    {
        ///
        /// Generated by the generator
        ///
        static Drive()
        {
            ClassConstructing();
            ClassConstructed();
        }
        static partial void ClassConstructing();
        static partial void ClassConstructed();
        
        ///
        /// Generated by the generator
        ///
        public Drive()
        {
            Constructing();
            _source = new Entities.App.Drive();
            Constructed();
        }
        partial void Constructing();
        partial void Constructed();
        ///
        /// Generated by the generator
        ///
        internal Drive(Entities.App.Drive source)
        {
            Constructing();
            _source = source;
            Constructed();
        }
        
        new internal Entities.App.Drive Source
        {
            get => (Entities.App.Drive)(_source!);
            set => _source = value;
        }
        
        public IdType VehicleId
        {
            get => Source.VehicleId;
            set => Source.VehicleId = value;
        }
        
        public IdType DriverId
        {
            get => Source.DriverId;
            set => Source.DriverId = value;
        }
        
        public System.DateTime Date
        {
            get => Source.Date;
            set => Source.Date = value;
        }
        
        public System.Int32 Distance
        {
            get => Source.Distance;
            set => Source.Distance = value;
        }
        
        public QTTaxiDriver.Logic.Models.Base.Driver? Driver
        {
            get => Source.Driver != null ? QTTaxiDriver.Logic.Models.Base.Driver.Create(Source.Driver) : null;
            set => Source.Driver = value?.Source;
        }
        
        public QTTaxiDriver.Logic.Models.Base.Vehicle? Vehicle
        {
            get => Source.Vehicle != null ? QTTaxiDriver.Logic.Models.Base.Vehicle.Create(Source.Vehicle) : null;
            set => Source.Vehicle = value?.Source;
        }
        ///
        /// Generated by the generator
        ///
        internal void CopyProperties(Entities.App.Drive other)
        {
            bool handled = false;
            BeforeCopyProperties(other, ref handled);
            if (handled == false)
            {
                VehicleId = other.VehicleId;
                DriverId = other.DriverId;
                Date = other.Date;
                Distance = other.Distance;
                Driver = other.Driver != null ? QTTaxiDriver.Logic.Models.Base.Driver.Create((object)other.Driver) : null;
                Vehicle = other.Vehicle != null ? QTTaxiDriver.Logic.Models.Base.Vehicle.Create((object)other.Vehicle) : null;
                Id = other.Id;
            }
            AfterCopyProperties(other);
        }
        partial void BeforeCopyProperties(Entities.App.Drive other, ref bool handled);
        partial void AfterCopyProperties(Entities.App.Drive other);
        ///
        /// Generated by the generator
        ///
        public void CopyProperties(QTTaxiDriver.Logic.Models.App.Drive other)
        {
            bool handled = false;
            BeforeCopyProperties(other, ref handled);
            if (handled == false)
            {
                VehicleId = other.VehicleId;
                DriverId = other.DriverId;
                Date = other.Date;
                Distance = other.Distance;
                Driver = other.Driver != null ? QTTaxiDriver.Logic.Models.Base.Driver.Create((object)other.Driver) : null;
                Vehicle = other.Vehicle != null ? QTTaxiDriver.Logic.Models.Base.Vehicle.Create((object)other.Vehicle) : null;
                Id = other.Id;
            }
            AfterCopyProperties(other);
        }
        partial void BeforeCopyProperties(QTTaxiDriver.Logic.Models.App.Drive other, ref bool handled);
        partial void AfterCopyProperties(QTTaxiDriver.Logic.Models.App.Drive other);
        ///
        /// Generated by the generator
        ///
        public override bool Equals(object? obj)
        {
            bool result = false;
            if (obj is Models.App.Drive other)
            {
                result = Id == other.Id;
            }
            return result;
        }
        ///
        /// Generated by the generator
        ///
        public override int GetHashCode()
        {
            return this.CalculateHashCode(VehicleId, DriverId, Date, Distance, Driver, Vehicle, Id);
        }
        ///
        /// Generated by the generator
        ///
        public static QTTaxiDriver.Logic.Models.App.Drive Create()
        {
            BeforeCreate();
            var result = new QTTaxiDriver.Logic.Models.App.Drive();
            AfterCreate(result);
            return result;
        }
        ///
        /// Generated by the generator
        ///
        public static QTTaxiDriver.Logic.Models.App.Drive Create(object other)
        {
            BeforeCreate(other);
            var result = new QTTaxiDriver.Logic.Models.App.Drive();
            CommonBase.Extensions.ObjectExtensions.CopyFrom(result, other);
            AfterCreate(result, other);
            return result;
        }
        ///
        /// Generated by the generator
        ///
        public static QTTaxiDriver.Logic.Models.App.Drive Create(QTTaxiDriver.Logic.Models.App.Drive other)
        {
            BeforeCreate(other);
            var result = new QTTaxiDriver.Logic.Models.App.Drive();
            result.CopyProperties(other);
            AfterCreate(result, other);
            return result;
        }
        ///
        /// Generated by the generator
        ///
        public static QTTaxiDriver.Logic.Models.App.Drive Create(Entities.App.Drive other)
        {
            BeforeCreate(other);
            var result = new QTTaxiDriver.Logic.Models.App.Drive();
            result.Source = other;
            AfterCreate(result, other);
            return result;
        }
        static partial void BeforeCreate();
        static partial void AfterCreate(QTTaxiDriver.Logic.Models.App.Drive instance);
        static partial void BeforeCreate(object other);
        static partial void AfterCreate(QTTaxiDriver.Logic.Models.App.Drive instance, object other);
        static partial void BeforeCreate(QTTaxiDriver.Logic.Models.App.Drive other);
        static partial void AfterCreate(QTTaxiDriver.Logic.Models.App.Drive instance, QTTaxiDriver.Logic.Models.App.Drive other);
        static partial void BeforeCreate(Entities.App.Drive other);
        static partial void AfterCreate(QTTaxiDriver.Logic.Models.App.Drive instance, Entities.App.Drive other);
    }
}
